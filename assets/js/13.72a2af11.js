(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{500:function(r,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var r=this,a=r.$createElement,n=r._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[n("h1",{attrs:{id:"排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#排序算法"}},[r._v("#")]),r._v(" 排序算法")]),r._v(" "),n("h2",{attrs:{id:"_1、冒泡排序-bubble-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、冒泡排序-bubble-sort"}},[r._v("#")]),r._v(" 1、冒泡排序（Bubble Sort）")]),r._v(" "),n("p",[r._v("比较相邻元素交换,每次循环定下来一个最大的值")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function bubbleSort(arr) {\n    varlen = arr.length;\n    for(var i = 0; i < len - 1; i++) {\n        for(var j = 0; j < len - 1 - i; j++) {\n            if(arr[j] > arr[j+1]) {        // 相邻元素两两对比\n                vartemp = arr[j+1];        // 元素交换\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    returnarr;\n}\n")])])]),n("h2",{attrs:{id:"_2、选择排序-selection-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、选择排序-selection-sort"}},[r._v("#")]),r._v(" 2、选择排序（Selection Sort）")]),r._v(" "),n("p",[r._v("每次找到最小值（通过与arr[i]比较，交换），永远保证第i个值最小")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for(var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for(var j = i + 1; j < len; j++) {\n            if(arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n} \n")])])]),n("h2",{attrs:{id:"_3、插入排序-insertion-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、插入排序-insertion-sort"}},[r._v("#")]),r._v(" 3、插入排序（Insertion Sort）")]),r._v(" "),n("p",[r._v("每次将第i个值 若小于左边的值就往前插入，从而构建有序序列（保证前i-1个值有序）。即在已排序序列中从后向前扫描，找到相应位置并插入。")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("function insertionSort(arr) {\n    var len = arr.length;\n    for(var i = 1; i < len; i++) {\n        for(var j = i; j > 0; j--) {\n            if(arr[j]<arr[j-1]){\n                [arr[j],arr[j-1]] = [arr[j-1],arr[j]]\n            }\n        }\n    }\n    return arr;\n} \n")])])]),n("h3",{attrs:{id:"_4、快速排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、快速排序"}},[r._v("#")]),r._v(" 4、快速排序")]),r._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[r._v("var quickSortw = function(arr, left, right){\n    if(left >= right) {\n        return arr;\n    }\n    let i = left;\n    let j = right\n    let base = arr[left]\n\n    while (i<j){\n        while (i<j&&arr[j]>=base){j--} //必须是先j再I！！！！！！！\n        while (i<j&&arr[i]<=base){i++}\n\n        if(i<j){\n            [arr[i],arr[j]] = [arr[j],arr[i]]}\n    }// 循环后\n    arr[left] = arr[i] //数组最左侧的值（也就是基准值）与现在的第i位交换，因为i左侧都比基准值小，右侧大\n    arr[i] = base // 再将基准值赋给i，交换完成\n    quickSortw(arr,left,i-1)\n    quickSortw(arr,i+1,right)\n    return arr\n}\n")])])]),n("h3",{attrs:{id:"_5、归并排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、归并排序"}},[r._v("#")]),r._v(" 5、归并排序")]),r._v(" "),n("p",[r._v("分治法，先使每个子序列有序，再将已有序的子序列合并")])])}),[],!1,null,null,null);a.default=e.exports}}]);