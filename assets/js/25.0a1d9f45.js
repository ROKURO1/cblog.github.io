(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{511:function(e,r,a){"use strict";a.r(r);var t=a(4),v=Object(t.a)({},(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"pwa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[e._v("#")]),e._v(" PWA")]),e._v(" "),a("h2",{attrs:{id:"一-什么是pwa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是pwa"}},[e._v("#")]),e._v(" 一 什么是PWA")]),e._v(" "),a("p",[a("strong",[e._v("即Progressive Web App, 是提升 Web App 的体验的一种新方法，能给用户原生应用的体验")])]),e._v(" "),a("h3",{attrs:{id:"pwa具有三个特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwa具有三个特点"}},[e._v("#")]),e._v(" PWA具有三个特点：")]),e._v(" "),a("ol",[a("li",[e._v("加载非常迅速，即使在各种不确定的网络情况下也不会展示断网错误页")]),e._v(" "),a("li",[e._v("响应用户交互非常迅速，动画平滑，操作不会有卡顿")]),e._v(" "),a("li",[e._v("拥有类似原生应用的体验")])]),e._v(" "),a("h3",{attrs:{id:"pwa中的一些技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwa中的一些技术"}},[e._v("#")]),e._v(" PWA中的一些技术")]),e._v(" "),a("p",[e._v("PWA本身其实是一个概念集合，它不是指某一项技术，而是通过一系列的Web技术与Web标准来优化Web App的安全、性能和体验。其中涉及到的一些技术概念包括了：")]),e._v(" "),a("ul",[a("li",[e._v("Web App Manifest")]),e._v(" "),a("li",[e._v("Service Worker")]),e._v(" "),a("li",[e._v("Cache API 缓存")]),e._v(" "),a("li",[e._v("Push&Notification 推送与通知")]),e._v(" "),a("li",[e._v("Background Sync 后台同步")]),e._v(" "),a("li",[e._v("响应式设计\n……")])]),e._v(" "),a("h2",{attrs:{id:"二-manifest-让webapp更-native"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-manifest-让webapp更-native"}},[e._v("#")]),e._v(" 二 Manifest 让WebApp更“Native”")]),e._v(" "),a("p",[e._v("可以将访问的网站添加到桌面，这样就会在桌面生成一个类似“快捷方式”的图标，当你点击该图标时，便可以快速访问该网站（Web App）"),a("br"),e._v("\n除此之外 还有一些重要的特性：")]),e._v(" "),a("ul",[a("li",[e._v("Web App可以被添加到桌面并有它自己的应用图标；")]),e._v(" "),a("li",[e._v("同时，从桌面开启时，会和原生app一样有它自己的“开屏图”；")]),e._v(" "),a("li",[e._v("更进一步的，这个Web App在的样子几乎和原生应用一样——没有浏览器的地址栏、工具条，似乎和Native App一样运行在一个独立的容器中。")])]),e._v(" "),a("p",[a("strong",[e._v("Manifest")]),e._v("是一个***JSON格式的文件***，你可以把它理解为一个指定了Web App桌面图标、名称、开屏图标、运行模式等一系列资源的一个清单"),a("br"),e._v("\nmanifest.json")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "name": "图书搜索",\n    "short_name": "书查",\n    "start_url": "/",\n    "display": "standalone",\n    "background_color": "#333",\n    "description": "一个搜索图书的小WebAPP（基于豆瓣开放接口）",\n    "orientation": "portrait-primary",\n    "theme_color": "#5eace0",\n    "icons": [{\n        "src": "img/icons/book-32.png",\n        "sizes": "32x32",\n        "type": "image/png"\n    ...\n')])])]),a("h2",{attrs:{id:"三-service-worker-让你的webapp离线可用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-service-worker-让你的webapp离线可用"}},[e._v("#")]),e._v(" 三 Service Worker 让你的WebApp离线可用")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("使用Service Worker来拦截本地请求，辅以cache API实现离线服务")])])]),e._v(" "),a("p",[e._v("离线只是它的一种功能表现而已，具体说来，它可以：")]),e._v(" "),a("ul",[a("li",[e._v("让我们的Web App在无网（offline）情况下可以访问，甚至使用部分功能，而不是展示“无网络连接”的错误页；")]),e._v(" "),a("li",[e._v("让我们在弱网的情况下，能使用缓存快速访问我们的应用，提升体验；")]),e._v(" "),a("li",[e._v("在正常的网络情况下，也可以通过各种自发控制的缓存方式来节省部分请求带宽；")]),e._v(" "),a("li",[e._v("……\n而这一切，其实都要归功于PWA背后的英雄 —— Service Worker。")])]),e._v(" "),a("h3",{attrs:{id:"service-worker是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker是什么"}},[e._v("#")]),e._v(" Service Worker是什么")]),e._v(" "),a("p",[e._v("可以把Service Worker简单理解为一个独立于前端页面，在后台运行的进程。因此，它不会阻塞浏览器脚本的运行，同时也无法直接访问浏览器相关的API（例如：DOM、localStorage等）。此外，即使在离开你的Web App，甚至是关闭浏览器后，它仍然可以运行。它就像是一个在Web应用背后默默工作的勤劳小蜜蜂，处理着缓存、推送、通知与同步等工作。")]),e._v(" "),a("h3",{attrs:{id:"service-worker是如何实现离线可用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-worker是如何实现离线可用的"}},[e._v("#")]),e._v(" Service Worker是如何实现离线可用的？")]),e._v(" "),a("ul",[a("li",[e._v("把资源缓存起来，将网络请求变为本地访问 --需要一个本地的cache，可以灵活地将各类资源进行本地存取。")]),e._v(" "),a("li",[e._v("还需要能够有效地使用缓存、更新缓存与清除缓存，进一步应用各种个性化的缓存策略 ——Service Worker的部分工作之一")])])])}),[],!1,null,null,null);r.default=v.exports}}]);