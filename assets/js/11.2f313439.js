(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{498:function(t,a,r){"use strict";r.r(a);var s=r(4),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"回溯算法解题套路框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法解题套路框架"}},[t._v("#")]),t._v(" 回溯算法解题套路框架")]),t._v(" "),r("h2",{attrs:{id:"思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#思想"}},[t._v("#")]),t._v(" 思想")]),t._v(" "),r("p",[t._v("回溯算法就是个多叉树的遍历问题，关键就是在前序遍历和后序遍历的位置做一些操作\n解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：\n1、路径：也就是已经做出的选择。\n2、选择列表：也就是你当前可以做的选择。\n3、结束条件：也就是到达决策树底层，无法再做选择的条件。")]),t._v(" "),r("h2",{attrs:{id:"框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[t._v("#")]),t._v(" 框架：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("result = []\ndef backtrack(路径, 选择列表):\n    if 满足结束条件:\n        result.add(路径)\n        return\n\n    for 选择 in 选择列表:\n        做选择\n        backtrack(路径, 选择列表)\n        撤销选择\n")])])]),r("p",[t._v("其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」")]),t._v(" "),r("h2",{attrs:{id:"全排列问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全排列问题"}},[t._v("#")]),t._v(" 全排列问题")])])}),[],!1,null,null,null);a.default=e.exports}}]);