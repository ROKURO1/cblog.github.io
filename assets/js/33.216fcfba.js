(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{518:function(t,a,e){"use strict";e.r(a);var v=e(4),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"basic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#basic"}},[t._v("#")]),t._v(" Basic")]),t._v(" "),e("h2",{attrs:{id:"一-生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-生命周期"}},[t._v("#")]),t._v(" 一.生命周期")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("钩子函数")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("beforeCreate")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("vue实例创建后触发")])]),t._v(" "),e("tr",[e("td",[t._v("created")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("初始化data/methods/computed等等完成")])]),t._v(" "),e("tr",[e("td",[t._v("beforeMount")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("模版编译(render)，生成HTML但还没有挂载到DOM上")])]),t._v(" "),e("tr",[e("td",[t._v("mounted")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("挂载结束")])]),t._v(" "),e("tr",[e("td",[t._v("beforeUpdate")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("组件更新前，虚拟DOM打补丁和重新渲染之前")])]),t._v(" "),e("tr",[e("td",[t._v("updated")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",[t._v("beforeDestory")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),e("tr",[e("td",[t._v("destoryed")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),e("h2",{attrs:{id:"二-vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-vue-router"}},[t._v("#")]),t._v(" 二.vue-router")]),t._v(" "),e("p",[t._v("url改变->触发监听事件->改变vue-router中的current变量->（监视current的监视者）监测到变化->获取新的组件->render新组件"),e("br")]),t._v(" "),e("h4",{attrs:{id:"hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" hash")]),t._v(" "),e("ol",[e("li",[t._v("使用onhashchange监听hash的变化"),e("br")]),t._v(" "),e("li",[t._v("location.hash直接拿到当前hash"),e("br")])]),t._v(" "),e("p",[t._v("hash只是出现在url中，不会请求http"),e("br"),t._v("\n每次改变#后的值都会在browser历史中加记录"),e("br")]),t._v(" "),e("h4",{attrs:{id:"history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),e("ol",[e("li",[t._v("通过location.pathname拿到"),e("br"),t._v("\n通过onpopstate 监听history变化"),e("br")]),t._v(" "),e("li",[t._v("使用HTML5 history interface新增的pushState和replaceState方法应用于历史记录栈，在back、forward、to基础上对历史记录栈进行修改")])]),t._v(" "),e("h2",{attrs:{id:"三-组件间传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-组件间传值"}},[t._v("#")]),t._v(" 三.组件间传值")]),t._v(" "),e("h4",{attrs:{id:"父-子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父-子"}},[t._v("#")]),t._v(" 父->子")]),t._v(" "),e("ul",[e("li",[t._v("父组件用v-bind绑定")]),t._v(" "),e("li",[t._v("子组件用props接收")])]),t._v(" "),e("h4",{attrs:{id:"子-父"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子-父"}},[t._v("#")]),t._v(" 子->父")]),t._v(" "),e("ul",[e("li",[t._v("子组件使用$emit( )触发父组件事件")]),t._v(" "),e("li",[t._v("父组件接收子组件数据时，接收的方法需绑定在子组件上")])]),t._v(" "),e("h4",{attrs:{id:"兄弟间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兄弟间"}},[t._v("#")]),t._v(" 兄弟间")]),t._v(" "),e("ul",[e("li",[t._v("建立中转站")]),t._v(" "),e("li",[t._v("在两个兄弟组件中都import这个中转站 分别绑定方法用于获取数据")]),t._v(" "),e("li",[t._v("发送方通过emit发送 接收方用on接受")])]),t._v(" "),e("h2",{attrs:{id:"四-computed-watch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-computed-watch"}},[t._v("#")]),t._v(" 四.Computed&watch")]),t._v(" "),e("h3",{attrs:{id:"computed-计算属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#computed-计算属性"}},[t._v("#")]),t._v(" computed 计算属性")]),t._v(" "),e("p",[t._v("作用：自动监听依赖值对变化，从而动态返回内容"),e("br"),t._v("\n特点：由两部分组成，默认只有get"),e("br"),t._v("\n计算属性和methods的区别：计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值,而不必再次执行函数。")]),t._v(" "),e("h3",{attrs:{id:"watch-侦听属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch-侦听属性"}},[t._v("#")]),t._v(" watch 侦听属性")]),t._v(" "),e("p",[t._v("某个属性发生改变引起对异步或开销较大对操作"),e("br"),t._v("\nhandler方法和immdiate属性"),e("br"),t._v("\nimmdiate： watch默认绑定，页面首次加载时，是不会执行的。只有值发生改变才会执行。"),e("br"),t._v("\ndeep： 如果是监听的是对象类型，会一层层遍历，给这个对象的所有属性都加上这个监听器。但是这样性能开销会比较大，修改任何一个属性，都能触发")]),t._v(" "),e("h2",{attrs:{id:"五-mvc-mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-mvc-mvvm"}},[t._v("#")]),t._v(" 五.MVC&MVVM")]),t._v(" "),e("p",[t._v("MVC M数据 V视图 C控制器 处理用户交互，从model中取数据传给view中显示或在view中接收用户输入的数据传给model"),e("br"),t._v("\nMVVM 实现了View和Model的自动同步，不需要再去手动操作DOM。")]),t._v(" "),e("h2",{attrs:{id:"六-nexttick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-nexttick"}},[t._v("#")]),t._v(" 六.nextTick")]),t._v(" "),e("p",[t._v("nextTick里面的代码会在DOM更新后执行，因为Vue 异步执行 DOM 更新,并不是数据更新后DOM立刻更新"),e("br")]),t._v(" "),e("h3",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),e("p",[t._v("一 在created( )中使用 因为created( )中dom没有进行渲染，所以操作dom没有用"),e("br"),t._v("\n二 mounted 中使用nextTick是等待所有视图渲染完毕")]),t._v(" "),e("h2",{attrs:{id:"七-v-if-v-show区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-v-if-v-show区别"}},[t._v("#")]),t._v(" 七.v-if/v-show区别")]),t._v(" "),e("p",[t._v("v-if   元素DOM节点的创建与删除。         涉及到权限、安全"),e("br"),t._v("\nv-show 操作元素的display属性。          需要频繁触发时")]),t._v(" "),e("h2",{attrs:{id:"八-vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-vuex"}},[t._v("#")]),t._v(" 八.Vuex")]),t._v(" "),e("p",[t._v("集中式状态管理")]),t._v(" "),e("ul",[e("li",[t._v("state    读取数据")]),t._v(" "),e("li",[t._v("mutations 修改数据,通过this.$store.commit触发")]),t._v(" "),e("li",[t._v("getter 类似compute")]),t._v(" "),e("li",[t._v("action 将mutations里的方法改成可异步的,通过this.$store.dispatch触发")]),t._v(" "),e("li",[t._v("modules 当store对象非常复杂时，可将其分为一个个module（每一个module都包含自己的 state、mutation、action、getter）")])]),t._v(" "),e("h2",{attrs:{id:"v-bind与v-model区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-bind与v-model区别"}},[t._v("#")]),t._v(" v-bind与v-model区别")]),t._v(" "),e("h3",{attrs:{id:"v-bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-bind"}},[t._v("#")]),t._v(" v-bind")]),t._v(" "),e("ul",[e("li",[t._v("是一个***单向数据***绑定，映射关系：Model->View，我们不需要进行额外的DOM操作，只需要进行Model的操作就可以实现视图的联动更新。")]),t._v(" "),e("li",[t._v("用于绑定class等")])]),t._v(" "),e("h3",{attrs:{id:"v-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model"}},[t._v("#")]),t._v(" v-model")]),t._v(" "),e("ul",[e("li",[t._v("是一个***双向数据***绑定，映射关系：View接受的数据,传给model,model的数据再传给view。把Model绑定到View的同时也将View绑定到Model上，这样就既可以通过更新Model来实现View的自动更新，也可以通过更新View来实现Model数据的更新。")]),t._v(" "),e("li",[t._v("用于输入型元素，如input/select等等")])]),t._v(" "),e("h2",{attrs:{id:"插槽slot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插槽slot"}},[t._v("#")]),t._v(" 插槽slot")]),t._v(" "),e("ol",[e("li",[t._v("匿名插槽")]),t._v(" "),e("li",[t._v("具名插槽")])])])}),[],!1,null,null,null);a.default=r.exports}}]);